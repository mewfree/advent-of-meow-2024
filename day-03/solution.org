#+title: Advent of Code 2024 Day 3
#+property: header-args :tangle solution.rb

Read content of memory:
#+begin_src ruby :session day3
memory = File.read("example.txt")
#+end_src

#+RESULTS:
: xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))

Extract numbers to be multiplied:
#+begin_src ruby :session day3
instructions = memory.scan(/mul\((\d{1,3}),(\d{1,3})\)/)
#+end_src

#+RESULTS:
|  2 | 4 |
|  5 | 5 |
| 11 | 8 |
|  8 | 5 |

Multiply each pair and sum total:
#+begin_src ruby :session day3
result = instructions.map { |a, b| a.to_i * b.to_i }.sum
#+end_src

#+RESULTS:
: 161

Print result:
#+begin_src ruby :results none :session day3
puts "Part 1: #{result}"
#+end_src

Extract instructions and numbers to be multiplied:
#+begin_src ruby :session day3
instructions2 = memory.scan(/(do\(\)|don't\(\)|mul\((\d{1,3}),(\d{1,3})\))/)
#+end_src

#+RESULTS:
| mul(2,4)  |   2 |   4 |
| don't()   | nil | nil |
| mul(5,5)  |   5 |   5 |
| mul(11,8) |  11 |   8 |
| do()      | nil | nil |
| mul(8,5)  |   8 |   5 |

Filter out from array anything between don't() and do():
#+begin_src ruby :session day3
filtered = instructions2.inject([]) do |result, element|
  @ignore = true if element == ["don't()", nil, nil]
  result << element unless @ignore
  @ignore = false if element == ["do()", nil, nil]
  result
end
#+end_src

#+RESULTS:
| mul(2,4) | 2 | 4 |
| mul(8,5) | 8 | 5 |

Multiply each pair and sum total:
#+begin_src ruby :session day3
result2 = filtered.map { |_, a, b| a.to_i * b.to_i }.sum
#+end_src

#+RESULTS:
: 48

Print result:
#+begin_src ruby :results none :session day3
puts "Part 2: #{result2}"
#+end_src
